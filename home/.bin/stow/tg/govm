#! /bin/bash

cmd="$1"

function usage() {
	echo 'usage: govm <command> [args]'
	echo ''
	echo 'Manage go versions. To make this script effective, you must prepend your PATH with "$HOME/sdk/go/bin".'
	echo 'This script manages go versions in "$HOME/sdk", and symlinks the active go version to "$HOME/sdk/go".'
	echo ''
	echo 'Commands:'
	echo '  help               Show this help message and exit.'
	echo '  list               List all versions present in "$HOME/sdk/go". Active version is marked with '*'.'
	echo '  install <version>  Install a go version in "$HOME/sdk".'
	echo '  use     <version>  Symlink the selected go version to "$HOME/sdk/go".'
}

if [[ "$cmd" == "" ]]; then
	usage
	exit 1
elif [[ "$cmd" == "help" ]]; then
	usage
	exit 0
elif [[ "$cmd" == "install" ]]; then
	go_bin="$HOME/go/bin"
	version="$2"

	if [[ "$GOPATH" != "" ]]; then
		go_bin="$GOPATH/bin"
	fi

	if [[ "$GOBIN" != "" ]]; then
		go_bin="$GOBIN"
	fi

	if [[ "$version" == "" ]]; then
		echo "Please provide a version"
		exit 1
	fi

	go install golang.org/dl/go"$version"@latest

	"$go_bin/go$version" download
elif [[ "$cmd" == "use" ]]; then
	version="$2"

	if [[ "$version" == "" ]]; then
		echo "Please provide a version"
		exit 1
	fi

	if ! [[ -d "$HOME/sdk/go$version" ]]; then
		echo "go$version not installed, run: govm install $version"
		exit 1
	fi

	rm -f "$HOME/sdk/go"
	ln -s "$HOME/sdk/go$version" "$HOME/sdk/go"

	echo "Using go$version"
elif [[ "$cmd" == "list" ]]; then
	if ! [[ -d "$HOME/sdk" ]]; then
		echo "No go sdk directory found"
		exit 1
	fi

	current_version=$(go version | grep -oe 'go[0-9]\+\.[0-9]\+\.[0-9]\+')
	installed_versions=("$HOME"/sdk/go*)
	# "##*/" removes all but the basename in the globbed path
	installed_versions=("${installed_versions[@]##*/}")

	for v in "${installed_versions[@]}"; do
		if [[ "$v" == "go" ]]; then
			continue
		fi
		if [[ "$v" == "$current_version" ]]; then
			printf -- "%s*\n" "$v"
		else
			printf -- "%s\n" "$v"
		fi
	done
else
	echo "Unknown command: $cmd"
	echo ""
	usage
	exit 1
fi
